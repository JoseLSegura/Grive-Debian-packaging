Description: JSON-C lib adaptation
 Due to the transition of the denomination of JSON-C in Debian, the include
 paths has changed. This patch correct them.
Origin: vendor
Forwarded: not-needed
Author: Jos√© Luis Segura Lucas <josel.segura@gmx.es>

Index: Grive-Debian-packaging/cmake/Modules/FindJSONC.cmake
===================================================================
--- Grive-Debian-packaging.orig/cmake/Modules/FindJSONC.cmake	2013-09-09 01:02:04.835068546 +0200
+++ Grive-Debian-packaging/cmake/Modules/FindJSONC.cmake	2013-09-09 01:02:04.835068546 +0200
@@ -6,8 +6,8 @@
 #  JSONC_INCLUDE_DIR - The JSON-C include directory.
 #  JSONC_LIBRARY     - The JSON-C library to link against.
 
-FIND_PATH(JSONC_INCLUDE_DIR json/json.h)
-FIND_LIBRARY(JSONC_LIBRARY NAMES json)
+FIND_PATH(JSONC_INCLUDE_DIR json-c/json.h)
+FIND_LIBRARY(JSONC_LIBRARY NAMES json-c)
 
 IF (JSONC_INCLUDE_DIR AND JSONC_LIBRARY)
    SET(JSONC_FOUND TRUE)
Index: Grive-Debian-packaging/libgrive/src/protocol/Json.cc
===================================================================
--- Grive-Debian-packaging.orig/libgrive/src/protocol/Json.cc	2013-09-09 01:02:27.358589028 +0200
+++ Grive-Debian-packaging/libgrive/src/protocol/Json.cc	2013-09-09 01:02:51.826068138 +0200
@@ -29,8 +29,8 @@
 	#pragma warning(push)
 	#pragma warning(disable: 4005)
 #endif
-#include <json/json_tokener.h>
-#include <json/linkhash.h>
+#include <json-c/json_tokener.h>
+#include <json-c/linkhash.h>
 #ifdef _MSC_VER
 	#pragma warning(pop)
 #endif
@@ -149,7 +149,7 @@
 {
 	if ( m_json == 0 )
 		BOOST_THROW_EXCEPTION( Error() << JsonCApi_( "json_object_new_array" ) ) ;
-	
+
 	for ( std::vector<Json>::const_iterator i = arr.begin() ; i != arr.end() ; ++i )
 		Add( *i ) ;
 }
@@ -221,7 +221,7 @@
 Json Json::operator[]( const std::string& key ) const
 {
 	assert( m_json != 0 ) ;
-	
+
 	struct json_object *j = 0 ;
 	if ( !::json_object_object_get_ex( m_json, key.c_str(), &j ) )
 		BOOST_THROW_EXCEPTION(
@@ -229,7 +229,7 @@
 				<< JsonCApi_( "json_object_object_get" )
 				<< KeyNotFound_( key )
 				<< Json_( ::json_object_to_json_string(m_json) ) ) ;
-	
+
 	assert( j != 0 ) ;
 	return Json( j ) ;
 }
@@ -247,7 +247,7 @@
 				<< OutOfRange_( idx )
 				<< Json_( ::json_object_to_json_string(m_json) ) ) ;
 	}
-	
+
 	return Json( j ) ;
 }
 
@@ -264,7 +264,7 @@
 	if ( ::json_object_object_get_ex( m_json, key.c_str(), &j ) )
 	{
 		assert( j != 0 ) ;
-		
+
 		Json tmp( j ) ;
 		json.Swap( tmp ) ;
 		return true ;
@@ -286,7 +286,7 @@
 {
 	assert( m_json != 0 ) ;
 	assert( json.m_json != 0 ) ;
-	
+
 	::json_object_get( json.m_json ) ;
 	::json_object_array_add( m_json, json.m_json ) ;
 }
@@ -389,12 +389,12 @@
 Json::Object Json::AsObject() const
 {
 	Object result ;
-	
+
 	json_object_object_foreach( m_json, key, val )
 	{
 		result.insert( Object::value_type( key, Json( val ) ) ) ;
 	}
-	
+
 	return result ;
 }
 
@@ -415,10 +415,10 @@
 {
 	std::size_t count = ::json_object_array_length( m_json ) ;
 	Array result ;
-	
+
 	for ( std::size_t i = 0 ; i < count ; ++i )
 		result.push_back( Json( ::json_object_array_get_idx( m_json, i ) ) ) ;
-	
+
 	return result ;
 }
 
@@ -441,21 +441,21 @@
 Json Json::FindInArray( const std::string& key, const std::string& value ) const
 {
 	std::size_t count = ::json_object_array_length( m_json ) ;
-	
+
 	for ( std::size_t i = 0 ; i < count ; ++i )
 	{
 		Json item( ::json_object_array_get_idx( m_json, i ) ) ;
 		if ( item.Has(key) && item[key].Str() == value )
 			return item ;
 	}
-	
+
 	BOOST_THROW_EXCEPTION(
 		Error()
 			<< JsonCApi_( "Json::FindInArray" )
 			<< KeyNotFound_( key )
 			<< Value_(value)
 	) ;
-	
+
 	// shut off compiler warnings
 	return Json() ;
 }
@@ -482,7 +482,7 @@
 				<< JsonCApi_( "json_tokener_parse" )
 				<< ValueErr( str )
 		) ;
-	
+
 	return Json( json, NotOwned() ) ;
 }
 
@@ -495,23 +495,23 @@
 
 	struct json_tokener *tok = ::json_tokener_new() ;
 	struct json_object *json = 0 ;
-	
+
 	char buf[1024] ;
 	std::size_t count = 0 ;
 
 	while ( (count = in->Read( buf, sizeof(buf) ) ) > 0 )
 	{
 		json = ::json_tokener_parse_ex( tok, buf, count ) ;
-		
+
 		// check for parse error
 		if ( ::json_tokener_get_error(tok) == ::json_tokener_continue )
 			break ;
 	}
-	
+
 	// save the error code and free the tokener before throwing exceptions
 	::json_tokener_error err = ::json_tokener_get_error(tok) ;
 	::json_tokener_free( tok ) ; tok = 0 ;
-	
+
 	if ( err != json_tokener_success || json == 0 )
 	{
 		BOOST_THROW_EXCEPTION(
@@ -520,7 +520,7 @@
 				<< ErrMsg_( ::json_tokener_error_desc(err) )
 		) ;
 	}
-		
+
 	return Json( json, NotOwned() ) ;
 }
 
