Description: Fix for compiling in i386.
 The compilation on i386 architecture fails due to link errors.
Origin: https://github.com/Grive/grive/issues/193
Bug: https://github.com/Grive/grive/issues/193
Author: prplmnky <dametriouspeyton@rocketmail.com>
Reviewed-by: Jos√© Luis Segura Lucas <josel.segura@gmx.es>
Last-Update: 2013-07-22

--- a/libgrive/src/drive/State.cc
+++ b/libgrive/src/drive/State.cc
@@ -38,12 +38,12 @@
 	m_cstamp	( -1 )
 {
 	Read( filename ) ;
-	
+
 	// the "-f" option will make grive always thinks remote is newer
 	Json force ;
 	if ( options.Get("force", force) && force.Bool() )
 		m_last_sync = DateTime() ;
-	
+
 	Log( "last sync time: %1%", m_last_sync, log::verbose ) ;
 }
 
@@ -67,21 +67,21 @@
 {
 	assert( folder != 0 ) ;
 	assert( folder->IsFolder() ) ;
-	
+
 	// sync the folder itself
 	folder->FromLocal( m_last_sync ) ;
 
 	for ( fs::directory_iterator i( p ) ; i != fs::directory_iterator() ; ++i )
 	{
 		std::string fname = i->path().filename().string() ;
-	
+
 		if ( IsIgnore(fname) )
 			Log( "file %1% is ignored by grive", fname, log::verbose ) ;
-		
+
 		// check for broken symblic links
 		else if ( !fs::exists( i->path() ) )
 			Log( "file %1% doesn't exist (broken link?), ignored", i->path(), log::verbose ) ;
-		
+
 		else
 		{
 			// if the Resource object of the child already exists, it should
@@ -93,9 +93,9 @@
 				folder->AddChild( c ) ;
 				m_res.Insert( c ) ;
 			}
-			
-			c->FromLocal( m_last_sync ) ;			
-			
+
+			c->FromLocal( m_last_sync ) ;
+
 			if ( fs::is_directory( i->path() ) )
 				FromLocal( *i, c ) ;
 		}
@@ -104,7 +104,7 @@
 
 void State::FromRemote( const Entry& e )
 {
-	std::string fn = e.Filename() ;				
+	std::string fn = e.Filename() ;
 
 	if ( IsIgnore( e.Name() ) )
 		Log( "%1% %2% is ignored by grive", e.Kind(), e.Name(), log::verbose ) ;
@@ -112,10 +112,10 @@
 	// common checkings
 	else if ( e.Kind() != "folder" && (fn.empty() || e.ContentSrc().empty()) )
 		Log( "%1% \"%2%\" is a google document, ignored", e.Kind(), e.Name(), log::verbose ) ;
-	
+
 	else if ( fn.find('/') != fn.npos )
 		Log( "%1% \"%2%\" contains a slash in its name, ignored", e.Kind(), e.Name(), log::verbose ) ;
-	
+
 	else if ( !e.IsChange() && e.ParentHrefs().size() != 1 )
 		Log( "%1% \"%2%\" has multiple parents, ignored", e.Kind(), e.Name(), log::verbose ) ;
 
@@ -143,7 +143,7 @@
 
 	std::size_t count = 0 ;
 	std::vector<Entry>& en = m_unresolved ;
-	
+
 	for ( std::vector<Entry>::iterator i = en.begin() ; i != en.end() ; )
 	{
 		if ( Update( *i ) )
@@ -161,7 +161,7 @@
 {
 	assert( e.IsChange() ) ;
 	assert( !IsIgnore( e.Name() ) ) ;
-	
+
 	// entries in the change feed is always treated as newer in remote,
 	// so we override the last sync time to 0
 	if ( Resource *res = m_res.FindByHref( e.AltSelf() ) )
@@ -190,7 +190,7 @@
 			// since we are updating the ID and Href, we need to remove it and re-add it.
 			m_res.Update( child, e, m_last_sync ) ;
 		}
-		
+
 		// folder entry exist in google drive, but not local. we should create
 		// the directory
 		else if ( e.Kind() == "folder" || !e.Filename().empty() )
@@ -199,11 +199,11 @@
 			child = new Resource( name, e.Kind() ) ;
 			parent->AddChild( child ) ;
 			m_res.Insert( child ) ;
-			
+
 			// update the state of the resource
 			m_res.Update( child, e, m_last_sync ) ;
 		}
-		
+
 		return true ;
 	}
 	else
@@ -231,12 +231,12 @@
 	{
 		File file( filename ) ;
 		Json json = Json::Parse( &file ) ;
-		
+
 		Json last_sync = json["last_sync"] ;
 		m_last_sync.Assign(
 			last_sync["sec"].Int(),
 			last_sync["nsec"].Int() ) ;
-		
+
 		m_cstamp = json["change_stamp"].Int() ;
 	}
 	catch ( Exception& )
@@ -248,13 +248,13 @@
 void State::Write( const fs::path& filename ) const
 {
 	Json last_sync ;
-	last_sync.Add( "sec",	Json(m_last_sync.Sec() ) );
-	last_sync.Add( "nsec",	Json(m_last_sync.NanoSec() ) );
-	
+	last_sync.Add( "sec",	Json((boost::uint64_t)m_last_sync.Sec() ) );
+	last_sync.Add( "nsec",	Json((boost::uint64_t)m_last_sync.NanoSec() ) );
+
 	Json result ;
 	result.Add( "last_sync", last_sync ) ;
-	result.Add( "change_stamp", Json(m_cstamp) ) ;
-	
+	result.Add( "change_stamp", Json((boost::uint64_t)m_cstamp) ) ;
+
 	std::ofstream fs( filename.string().c_str() ) ;
 	fs << result ;
 }
@@ -270,7 +270,7 @@
 	// need to check if this introduces a new problem
  	DateTime last_sync_time = m_last_sync;
 	m_res.Root()->Sync( http, last_sync_time, options ) ;
-	
+
   	if ( last_sync_time == m_last_sync )
   	{
 		Trace( "nothing changed? %1%", m_last_sync ) ;
